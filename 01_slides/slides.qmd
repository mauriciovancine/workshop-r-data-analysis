---
title: "Linguagem R para análise estatística de dados"
author: "<br> [Maurício Vancine](https://mauriciovancine.github.io/) • [LEEC/Unesp](https://leec.eco.br/)"
date: "<br> Novembro de 2022"
format: 
  revealjs:
    theme: [custom.scss]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
    chalkboard: true
    logo: https://www.r-project.org/logo/Rlogo.svg
    execute:
      echo: true
      eval: false
      warning: false
      message: false
---

# Bem-vindos!

## Maurício Vancine 

::: columns
::: {.column width="40%"}
<center>
<br>
![](img/avatar.png)
[`r icons::icon_style(icons::fontawesome("link"), fill = "#2268bc")`](https://mauriciovancine.github.io/)
[`r icons::icon_style(icons::fontawesome("envelope", style = "solid"), fill = "#2268bc")`](mailto:mauricio.vancine@gmail.com)
[`r icons::icon_style(icons::academicons("cv"), fill = "#2268bc")`](https://mauriciovancine.github.io/cv/cv-mauricio-vancine-pt-academic-complete.html)
[`r icons::icon_style(icons::fontawesome("twitter"), fill = "#2268bc")`](https://twitter.com/mauriciovancine)
[`r icons::icon_style(icons::fontawesome("github"), fill = "#2268bc")`](https://github.com/mauriciovancine)
[`r icons::icon_style(icons::academicons("orcid"), fill = "#2268bc")`](https://orcid.org/0000-0001-9650-7575)
[`r icons::icon_style(icons::academicons("lattes"), fill = "#2268bc")`](http://lattes.cnpq.br/9761288418931193)
</center>
:::

::: {.column width="60%"}

- Ecólogo (2014)

- Doutorando em Ecologia (2020-?)

- Ecologia Espacial

- Modelagem Ecológica

- Análise de Dados Ecológicos e Geoespaciais

- Ecologia e Conservação de Anfíbios

- *Open source* [R, QGIS, GRASS GIS, GNU/Linux, ...]

:::
:::

## Análises Ecológicas no R (2022)

::: columns
::: {.column width="40%"}
<center>
<img src="img/aer.jpeg" href="https://analises-ecologicas.com/" style="width:90%"/>
</center>
:::

::: {.column width="60%"}

- 15 capítulos: linguagem R, tidyverse, perguntas em ecologia, análises univariadas, multivariadas e geoespaciais

- [bookdown](https://analises-ecologicas.com/)

- [PDF](https://canal6.com.br/livreacesso/livro/analises-ecologicas-no-r/)

- [Amazon](https://www.amazon.com.br/An%C3%A1lises-ecol%C3%B3gicas-Ferdo-Rodrigues-Silva/dp/857917564X/ref=sr_1_1?keywords=9788579175640&qid=1654379366&sr=8-1)

- [Código Fonte](https://github.com/paternogbc/livro_aer)

- [YouTube](https://www.youtube.com/channel/UCLSVSCnmvf2k6OoWZCnEO4w)

:::
:::

:::footer
[Da Silva et al. (2022)](https://analises-ecologicas.com/)
:::

## Quem são vocês?

<br>

1. Nome
1. Formação
1. O que faz ou pensa em fazer da vida?
1. Conhece algo sobre análise estatística de dados?
1. Como se sente em relação ao minicurso?

## Minicurso

::: {.incremental}
- Carga horária bem enxuta: 09 horas

- Talvez não vejamos todo o conteúdo

- Meu principal objetivo é introduzir o uso da linguagem

- Não veremos estatística

- Vou indicar muito material para estudo

- Cursos são ótimas oportunidades para o "quebrar o gelo", o aprendizado depende de vocês

:::

## Conteúdo {.smaller}

::: panel-tabset

## 1. Linguagem R

::: columns
::: {.column width="50%"}
::: nonincremental
- R e RStudio
- Script
- Objetos
- Funções
- Pacotes
- Diretório
:::
:::

::: {.column width="50%"}
::: nonincremental
- tidyverse
- Visualização de dados 
- Histograma e Densidade
- Gráfico de caixas
- Gráfico de dispersão
- Gráfico pareado
:::
:::
:::

## 2.Estatística

::: columns
::: {.column width="50%"}
::: nonincremental
- Formulação de perguntas em Ecologia
- Abordagens filosóficas e estatísticas em Ciência
- Hipóteses científicas
- Hipóteses estatísticas
- Princípio da parcimônia
:::
:::

::: {.column width="50%"}
::: nonincremental
- Teste de hipóteses
- Delineamento amostral
- População, amostra e variável
- Operacionalização em medidas de variáveis
:::
:::
:::

## 3. Dados

::: columns
::: {.column width="50%"}
::: nonincremental
- Organização de dados em planilhas
- Estatística descritiva
- Variáveis estatísticas
- Tipos de variáveis estatísticas
:::
:::

::: {.column width="50%"}
::: nonincremental
- Distribuição de frequência de variáveis
- Dados discrepantes (*outliers*)
- Transformações em variáveis estatísticas
:::
:::
:::

## 4. Modelos lineares

::: columns
::: {.column width="50%"}
::: nonincremental
- Variáveis resposta e explanatórias
- Tipos de análises de dados
- Análises univariadas
- Teste-t
- Teste-t não-paramétrico
:::
:::

::: {.column width="50%"}
::: nonincremental
- Análise de variância (ANOVA)
- Análise de variância (ANOVA) não-paramétrica
- Modelos lineares simples
- Modelos lineares múltiplos
:::
:::
:::

## 5. GLMs

::: columns
::: {.column width="50%"}
::: nonincremental
- Inferência por máximo verossimilhança
- Modelos Lineares Generalizados (GLM)
- Função de ligação
- Desvio (*Deviance*)
:::
:::

::: {.column width="50%"}
::: nonincremental
- Principais famílias de distribuição 
- Ajuste dos modelos
- Diagnóstico dos modelos
- Seleção de modelos
:::
:::
:::

:::

## Material

Todo o material está disponível no [GitHub](https://github.com/mauriciovancine/workshop-r-data-analysis)

<center>
<img src="img/github.png" style="width:50%"/>
</center>

:::footer
[GitHub](https://github.com/mauriciovancine/workshop-r-data-analysis)
:::

## IMPORTANTE!!!

**Estamos num espaço seguro e amigável**

Sintam-se à vontade para me interromper e tirar dúvidas

<center>
<img src="img/general_starwars_teamwork.png" style="width:50%"/>
</center>

:::footer
[@allison_horst](https://twitter.com/allison_horst)
:::

# 1. Linguagem R

## Definição

O R é uma **linguagem de programação livre** (*open source*), direcionada à **manipulação, análise e visualização de dados**, com diversas **expansões** (*pacotes*) para o uso de **dados com formatos específicos** 

<center>
<img src="img/r_logo.svg" style="width:40%"/>
</center>

:::footer
[R](https://www.r-project.org/)
:::

## Aplicações {.smaller}

**Manipulação, visualização e análise de dados**

- Estatísticas univariadas e multivariadas
- Análises de dados ecológicos
- Análise de dados espaciais, temporais e sonoros
- Análise de dados funcionais, genéticos e filogenéticos
- Análise de dados geoespaciais e sensoriamento remoto
- Visualização de todos os tipos de dados anteriores

**R Markdown e quarto**

- Textos em HTML, PDF, Word, ODT, Markdown
- Slides, Websites, Blogs, Livros e Artigos
- Shiny

![](img/r_markdown_output_formats.png){.absolute width=400 height=400 right=-100 top=150}
![](img/quarto.png){.absolute width=400 height=100 right=-100 top=570}

:::footer
[R Markdown](https://rmarkdown.rstudio.com/), [shiny](https://shiny.rstudio.com/), [quarto](https://quarto.org/)
:::

## RStudio

IDE: Ambiente de Desenvolvimento Integrado (*Integrated Development Environment*)

<br><br>
<center>
<img src="img/rstudio_logo.svg" style="width:80%"/>
</center>

:::footer
[RStudio](https://posit.co/downloads/)
:::

## IDE 

Ambiente de Desenvolvimento Integrado (*Integrated Development Environment*)

![](img/r_rstudio01.png){.absolute width=700 height=180 right=180 top=200}
![](img/r_rstudio02.png){.absolute width=700 height=280 right=180 top=370}

:::footer
[Ismay & Kim (2020)](https://posit.co/downloads/)
:::

## Interface

<center>
<img src="img/rstudio.png" style="width:100%"/>
</center>

:::footer
[RStudio](https://www.rstudio.com/)
:::

## Janelas e abas {.smaller}

<br>

**1. Editor/Script**: é onde escrevemos nossos códigos em R ou R Markdown  
**2. Console**: é onde os códigos são rodados e vemos as saídas  
**3. Environment**: painel com todos os objetos criados na sessão  
**3. History**: painel com o histórico dos códigos rodados  
**3. Connection**: painel para conectar banco de dados  
**3. Git**: painel do controle de versão  
**3. Tutorial**: painel de tutoriais  
**4. Files**: painel que mostra os arquivos no diretório de trabalho  
**4. Plots**: painel onde os gráficos são apresentados  
**4. Packages**: painel que lista os pacotes  
**4. Help**: painel onde a documentação das funções é exibida  
**4. Viewer**: painel de visualização 

![](img/rstudio.png){.absolute width=500 height=250 right=-170 top=420}

:::footer
[RStudio](https://www.rstudio.com/)
:::

## Projeto R (.Rproj)

- Facilita o trabalho em múltiplos ambientes 
- Cada projeto possui seu diretório, documentos e workspace
- Permite controle de versão (git e GitHub)

<br>
<center>
<img src="img/rstudio_project_logo.png" style="width:25%"/>
</center>

:::footer
[RStudio](https://www.rstudio.com/)
:::

## Conferindo os computadores

<center>
<img src="img/general_hard_soft_bg.png" style="width:80%"/>
</center>

:::footer
[Café com Código](https://www.instagram.com/cafecomcodigo/?hl=pt)
:::

## Console

O console é onde a linguagem R instalada é carregada para executar os códigos

<center>
<img src="img/rstudio_script.png" style="width:55%"/>
</center>

:::footer
[RStudio](https://www.rstudio.com/)
:::

## Console

- Na janela do console aparece o símbolo `>`, seguido de uma barra vertical `|` que fica piscando (cursor), onde digitamos ou enviamos nossos códigos do script 

- Vamos digitar `10 + 2` e apertar a tecla `Enter` para que essa operação seja executada

- O resultado retorna o valor `12`, precedido do valor um entre colchetes `[1]`

```{r}
10 + 2
```

## Console

- Os colchetes `[]` demonstram a posição do elemento numa sequência de valores

- Vamos criar uma sequência usando o operador `:` para demonstrar isso

- O número que aparecer nos colchetes vai depender da largura das janelas

```{r}
1:42
```

## Script

Onde os códigos são escritos e salvos no formato .R

- Atalho: `ctrl + shift + N`

<center>
<img src="img/rstudio_script.jpg" style="width:80%"/>
</center>

## Script

- Os códigos devem ser digitados preferencialmente no script

- Para executar um código, deixem o cursor em qualquer lugar da linha

- Atalho: `ctrl + enter`

```{r}
1
```

<br>

```{r}
1 + 2
```

## Script

**Comentários (#)**

- Comentários não são lidos pelo R e descrevem informações em nosso script

- São representados pelo `#` (hash) ou `#'` (hash-linha)

```{r}
# comentarios
# o r nao le o codigo depois do # (hash)

42 # essas palavras nao sao executadas, apenas o 42
```

## Script

**Comentários (#)**

- Sempre comece um script com um cabeçalho

- Ajuda a lembrar o que o script faz e quando foi escrito

```{r}
#' -
#' titulo: Linguagem R para análise de dados
#' autor: seu nome
#' data: 10-11-2022
#' -
```

#

<center>
<img src="img/general_comment_gandalf.jpg" style="width:50%"/>
</center>

## Operadores

**Operadores aritméticos (Números)**

| Operador |       Descrição      |   Uso   |
|:--:|:--:|:-:|
|     +    | Adição               |  a + b  |
|     –    | Subtração            |  a - b  |
|     *    | Multiplicação        |  a * b  |
|     /    | Divisão              |  a / b  |
|    %%    | Resto da divisão     |  a %% b |
|    %/%   | Quociente da divisão | a %/% b |
|     ^    | Potenciação          |   a^b   |

## Operadores

**Operadores relacionais (TRUE|FALSE)**

| Operador |       Descrição       |   Uso   |
|:--:|::|:-:|
|     <    | Menor                 |  a < b  |
|     >    | Maior                 |  a > b  |
|    ==    | Igual                 |  a == b |
|    <=    | Menor ou igual        |  a <= b |
|    >=    | Maior ou igual        | a > = b |
|    !=    | Não igual (diferente) |   a!=b  |

## Operadores

**Ordem das operações aritméticas**

<br>

`()` > `^` > `*` ou `/` > `+` ou `-`

<br>

```{r}
# sem especificar - segue a ordem das operações
1 * 2 + 2 / 2 ^ 2
```

<br>

```{r}
# especificando - segue a ordem dos parênteses
((1 * 2) + (2 / 2)) ^ 2
```

## Objetos

Palavras que atribuímos (guardamos) dados possibilitando sua manipulação

- Atribuição (<-)

- palavra <- dados

- Atalho: `alt + -`

![](img/general_assign.jpg){.absolute width=380 height=480 right=50 top=200}

## Objetos

Vamos atribuir o valor `10` à palavra `eco`

```{r}
# atribuicao - simbolo (<-)
eco <- 10 
```

# 

<center>
<img src="img/gif_where.gif" style="width:100%"/>
</center>

## Objetos

- Sempre confira a atribuição

- Dica: chame o objeto novamente

```{r}
# atribuicao - simbolo (<-)
eco <- 10 
eco
```

## Objetos

**Seja criativo**

O R sobrescreve os valores dos objetos com o mesmo nome

```{r}
# eco vale 10
eco <- 10 
eco
```

<br>

```{r}
# agora eco vale 2
eco <- 2 
eco
```

## Objetos {.smaller}

**Seja criativo, mas nem tanto...**

O R tem limitações ao nomear objetos!

1. Começar por letras (a-z ou A-Z) ou pontos (.)

1. Conter letras (a-z ou A-Z), números (0-9), underscores (_) ou pontos (.)

1.  *Case-sensitive*, i.e., ele difere letras maiúsculas de minúsculas

1. Evitar utilizar letras maiúsculas, acentos ou cedilha (ç)

1. Não podem ser iguais a nomes especiais: `break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while`

```{r error=TRUE}
for <- 1
```

## Objetos

Podemos utilizar objetos para fazer operações

```{r}
# definir dois objetos
eco1 <- 10
eco2 <- 2
```

<br>

```{r}
# operacoes com objetos
eco1 + eco2 # adicao
eco1 - eco2 # subtracao
eco1 * eco2 # multiplicacao
eco1 / eco2 # divisao
```

## Objetos

Podemos utilizar objetos para atribuir resultados de operações

```{r}
# operacoes com objetos e atribuicao
adi <- eco1 + eco2 # adicao
adi

sub <- eco1 - eco2 # subtracao
sub

mul <- eco1 * eco2 # multiplicacao
mul

div <- eco1 / eco2 # divisao
div
```

## Funções {.smaller}

Códigos que realizam operações em argumentos

- Estrutura de uma função: 

`nome_da_funcao(argumento1, argumento2)`

1. **Nome da função**: remete ao que ela faz (inglês)
1. **Parênteses**: limitam a função
1. **Argumentos**: onde a função atuará 
1. **Vírgulas**: separam os argumentos

![](img/code_function_annotated.png){.absolute width=600 height=300 right=-100 top=350}



## Funções

**Exemplos**

```{r}
# soma
sum(10, 2)

# soma de objetos
sum(eco1, eco2)

# soma de objetos atribuidos a objetos
eco_sum <- sum(eco1, eco2)
eco_sum
```

## Funções

**Argumentos**

Os argumentos podem ser de dois tipos:

1. **Objetos ou valores**: dados onde a função irá atuar

2. **Parâmetros**: mudam o comportamento da função (texto = TRUE|FALSE ou "texto")

```{r}
sum(1, 2, 3, NA)
sum(1, 2, 3, NA, na.rm = TRUE)
```

## Funções

**Argumentos como valores**

```{r}
# funcoes - argumentos como valores
sum(10, 2)
prod(10, 2)
```

**Argumentos como objetos**

```{r}
# funcoes - argumentos como objetos
sum(eco1, eco2)
prod(eco1, eco2)
```

## Funções

**Argumentos como parâmetros**

```{r}
# repeticao - vezes
rep(x = 1:5, times = 5)
```

<br>

```{r}
# repeticao - cada
rep(x = 1:5, each = 5)
```

## Funções

**Atribuição de resultados a objetos**

```{r}
# atribuicao dos resultados
rep_times <- rep(x = 1:5, times = 5)
rep_times
```

<br>

```{r}
rep_each <- rep(x = 1:5, each = 5)
rep_each
```

## Funções

**Atribuição, função e linha temporal**

Criar dois objetos

```{r}
# criar dois objetos
foo <- 2
bar <- 3
```

Somar esses objetos e atribuição

```{r}
# somar e atribuir
su <- sum(foo, bar)
su
```

Raiz quadrada e atribuição

```{r}
# raiz e atribuir
sq <- sqrt(su)
sq
```

## Funções

**Atribuição, função e linha temporal**

1. Atribuição de dados a objetos

2. Funções que operam e mudam esses dados

3. Nova atribuição desses resultados a novos objetos

```{r}
# criar dois objetos
foo <- 2
bar <- 3

# somar e atribuir
su <- sum(foo, bar)

# raiz e atribuir
sq <- sqrt(su)
```

## Pacotes

Conjunto de funções extras para executar tarefas específicas

<center>
<img src="img/r_packages.svg" style="width:70%"/>
</center>

## Pacotes

Duas fontes

- CRAN (*Comprehensive R Archive Network*)
- GitHub (Repositório de códigos)

```{r eval=FALSE}
# numero de pacotes no cran
nrow(available.packages())
```

<center>
<img src="img/r_number_packages.png" style="width:35%"/>
</center>

:::footer
[CRAN](https://cran.r-project.org/), [Scraping CRAN with rvest](https://www.r-bloggers.com/2017/03/scraping-cran-with-rvest/)
:::

## Pacotes {.smaller}

**Instalação de pacotes**

1. Download do pacote para o computador (como instalar um software/APP)
1. Precisa estar conectado à internet
1. O nome do pacote precisa estar entre aspas
1. Função (CRAN): `install.packages("pacote")`

**Instalar o pacote vegan**

```{r eval=FALSE}
# instalar pacotes
install.packages("vegan")
```

**Verificar pacotes instalados**

```{r eval=FALSE}
# verificar pacotes instalados
library()
```

## Pacotes {.smaller}

**Carregamento de pacotes**

1. Carregar o pacote para o R (como abrir software/APP)
1. Carrega-se toda vez que se abre o R
1. Não precisa estar conectado à internet
1. O nome do pacote não precisa estar entre aspas
1. Funções: `library(pacote)` ou `require(pacote)`

**Carregar o pacote vegan**

```{r}
# carregar pacotes
library(vegan)
```

**Verificar pacotes carregados**

```{r}
# verificar pacotes carregados
search()
```

## Pacotes {.smaller}

**Instalação de pacotes em desenvolvimento - GitHub**

1. Instalar pacote `remotes` ou `devtools`

```{r eval=FALSE}
# instalar pacote remotes
install.packages("remotes")

# carregar pacote remotes
library(remotes)
```

2. Instalar usando a função `install_github()`
3. Atentar para usar essa forma **usuário/repositório**

```{r eval=FALSE}
# instalar pacote do github
install_github("vegandevs/vegan")

# carregar pacote do github
library(vegan)
```

:::footer
[vegandevs/vegan](https://github.com/vegandevs/vegan)
:::

# Atributos de objetos

## Modo dos objetos (*mode*)

A natureza dos elementos definirá os modos dos objetos

::: columns
::: {.column width="50%"}
![](img/modes.png)
:::

::: {.column width="50%"}

```{r}
logical <- TRUE
logical

numeric <- 3.14
numeric

integer <- 2L
integer

complex <- 3 + 2i
complex

character <- "a"
character
```

:::
:::

## Estrutura dos objetos (*class*)

Organização dos elementos dos objetos

<center>
<img src="img/r_data_structures_general.png" style="width:70%"/>
</center>

## Estrutura dos objetos (*class*) {.smaller}

**Vector** 

Sequência de valores que representam uma variável contínua ou descrição textual

::: columns
::: {.column width="50%"}
<br><br>
![](img/r_data_structures_general.png)
:::

::: {.column width="50%"}
```{r}
# concatenar
c(1, 2, 3)
c("amostra1", "amostra2", "amostra3")

# sequencia
seq(1, 10, 2)

# repetir
rep(42, 5)

# combinar
paste("amostra", 1:3)

# amostrar
sample(1:60, 6)
```

:::
:::

## Estrutura dos objetos (*class*) {.smaller}

**Matrix** 

Representa os dados no formato de tabela, com linhas (locais) e colunas (variáveis)

::: columns
::: {.column width="50%"}
<br><br>
![](img/r_data_structures_general.png)
:::

::: {.column width="50%"}
```{r}
# dispor uma sequencia
ve <- 1:9
ma_col <- matrix(data = ve, nrow = 3, ncol = 3, byrow = FALSE)
ma_col

# combinar vetores
vec_1 <- c(1, 2, 3)
vec_2 <- c(4, 5, 6)

ma_rbind <- rbind(vec_1, vec_2)
ma_rbind

ma_cbind <- cbind(vec_1, vec_2)
ma_cbind
```

:::
:::


## Estrutura dos objetos (*class*) {.smaller}

**Array** 

Combinação de tabelas, com linhas (locais), colunas (variáveis) e dimensões (tempo)

::: columns
::: {.column width="50%"}
<br><br>
![](img/r_data_structures_general.png)
:::

::: {.column width="50%"}
```{r}
# dispor uma sequencia
ve <- sample(c(0, 1), 27, rep = TRUE)
ar <- array(data = ve, dim = c(3, 3, 3))
ar
```

:::
:::

## Estrutura dos objetos (*class*) {.smaller}

**List** 

Tipo especial de vetor que aceita objetos como elementos

::: columns
::: {.column width="50%"}
<br><br>
![](img/r_data_structures_general.png)
:::

::: {.column width="50%"}
```{r}
# concatenar objetos
li <- list(ve, # vector
           ma_rbind, # matrix
           ma_cbind) # outra matrix
li
```

:::
:::

## Estrutura dos objetos (*class*) {.smaller}

**Data frame** 

Representa os dados no formato de tabela, com linhas e colunas, mas misturando modos

::: columns
::: {.column width="50%"}
<br><br>
![](img/r_data_structures_general.png)
:::

::: {.column width="50%"}
```{r}
# combinando vetores horizontalmente
sp <- c("sp1", "sp2", "sp3")
ab <- c(12, 8, 9)
ha <- c("flo", "cer", "past")

df <- data.frame(sp, ab, ha)
df
```

```{r}
# combinando vetores horizontalmente com nomes
df <- data.frame(
  especies = paste0("sp", 1:3), 
  abundancia = sample(5:10, 3), 
  vegetacao = c("flo", "cer", "past")
)
df
```

:::
:::

# Dúvidas?

# tidyverse

#
<center>
<img src="img/general_data_science_r4ds.png" style="width:100%"/>
</center>

:::footer
[@allison_horst](https://twitter.com/allison_horst)
:::

## Descrição

- O `tidyverse` é um conjunto de pacotes designados para *Data Science*

- Todos os pacotes compartilham uma filosofia de design, gramática e estruturas de dados

- É um "dialeto novo" para a linguagem R

**tidy**: organizado, arrumado, ordenado  
**verse**: universo

:::footer
[What is the tidyverse?](https://rviews.rstudio.com/2017/06/08/what-is-the-tidyverse/)
:::

## Fluxo de trabalho

<br><br>

<center>
<img src="img/general_data_science.png" style="width:100%"/>
</center>

:::footer
[Wickham & Grolemund (2017)](https://r4ds.had.co.nz/)
:::

## Pacotes

<center>
<img src="img/tidyverse_flowchart.png" style="width:90%"/>
</center>

## Artigos {.smaller}

- Wickham, Hadley. "Tidy data." Journal of Statistical Software 59.10 (2014): 1-23.

- Wickham, Hadley, et al. "Welcome to the Tidyverse." Journal of Open Source Software 4.43 (2019): 1686.

<center>
<img src="img/tidyverse_papers.png" style="width:45%"/>
</center>

:::footer
[Wickham (2014)](https://www.jstatsoft.org/article/view/v059i10), [Wickham et al. (2019)](https://joss.theoj.org/papers/10.21105/joss.01686)
:::

## Livro

<center>
<img src="img/cover_data_science_r.png" style="width:35%"/>
</center>

:::footer
[Wickham & Grolemund (2017)](https://r4ds.had.co.nz/)
:::

## Site

<br>
<center>
<img src="img/tidyverse_site.png" style="width:100%"/>
</center>

:::footer
[tidyverse](https://www.tidyverse.org/)
:::

# 
<center>
<img src="img/package_tidyverse.png" style="width:50%"/>
</center>

:::footer
[tidyverse](https://tidyverse.tidyverse.org/)
:::

## tidyverse

Para utilizar os pacotes é preciso instalar e carregar o pacote `tidyverse`

```{r eval=FALSE}
# instalar pacote
install.packages("tidyverse")
```

```{r message=TRUE}
# carregar pacote
library(tidyverse)
```

## Pacotes do tidyverse

**Listar os pacotes**

```{r}
# listar todos os pacotes no tidyverse 
tidyverse::tidyverse_packages(include_self = TRUE)
```

## Sintaxe

Todas as funções dos pacotes `tidyverse` usam `fonte minúscula` e `_` para separar os nomes internos das funções (`snake_case`)

<br>
`read_csv()`

`read_xlsx()`

`as_tibble()`

`left_join()`

`group_by()`

![](img/code_snake_case.png){.absolute width=500 height=250 right=50 top=350}

## Sintaxe

Geralmente indica-se de quais pacotes as funções são utilizadas (`pacote::função`) para evitar erros com outros pacotes

![](img/code_snake_case.png){.absolute width=500 height=250 right=50 top=350}

<br>
`readr::read_csv()`

`readxl::read_xlsx()`

`tibble::as_tibble()`

`dplyr::left_join()`

`dplyr::group_by()`

# 
<center>
<img src="img/package_readr.png" style="width:50%"/>
</center>

:::footer
[readr](https://readr.tidyverse.org/)
:::

## Descrição {.smaller}

- Carrega e salva grandes arquivos de forma rápida

- As funções fornecem medidores de progresso (*big data*)

- Classificam o modo (tipo dos dados) de cada coluna

- A classe do objeto atribuído é `tibble`

- Funções:

- `read_csv()`: lê arquivos *Comma-separated values*
- `read_csv2()`: lê arquivos *Comma-separated values* (separado por ;)
- `read_tsv()`: lê arquivos *Tab-separated values*
- `read_delim()`: lê arquivos *delim-separated values*
- `write_csv()`: escreve arquivos *Comma-separated values*
- `write_csv2()`: escreve arquivos *Comma-separated values* (separado por ;)
- `write_delim()`: escreve arquivos *delim-separated values*

## Diretório

Caminho no computador para importar e exportar dados

**Definir diretório**

```{r}
# definir diretorio
setwd("/home/mude/data/github/mauriciovancine/workshop-r-data-analysis/01_slides")
```

**Conferir diretório**

```{r}
# conferir diretorio
getwd()

# listar arquivos
dir()
```

## Importar dados

ATLANTIC AMPHIBIANS: a dataset of amphibian communities from the Atlantic Forests of South America

<center>
<img src="img/general_data_eu_mesmo.png" style="width:75%"/>
</center>

:::footer
[Vancine et al. (2018)](https://doi.org/10.1002/ecy.2392)
:::

## Importar dados

**Formato .csv**

```{r}
# importar csv
si <- readr::read_csv("../03_dados/ATLANTIC_AMPHIBIANS_sites.csv")
si
```

## Importar dados

**Formato .txt**

```{r}
# importar txt
si <- readr::read_tsv("../03_dados/ATLANTIC_AMPHIBIANS_sites.txt")
si
```

# 
<center>
<img src="img/package_readxl.png" style="width:50%"/>
</center>

:::footer
[readxl](https://readxl.tidyverse.org/)
:::

## Descrição {.smaller}

Pacotes para importar e exportar planilhas no formato Excel®

- Carrega e salva grandes arquivos de forma rápida

- As funções fornecem medidores de progresso (*big data*)

- Classificam o modo (tipo dos dados) de cada coluna

- A classe do objeto atribuído é `tibble`

- Funções:

- `read_excel()`: lê arquivos de planilhas Excel®
- `read_xls()`: lê arquivos de planilhas Excel® (antes de 2010)
- `write_xlsx()`: escreve arquivos de planilhas Excel®

```{r eval=FALSE}
# importar .xlsx
install.packages("readxl")
library("readxl")

# exportar .xlsx
install.packages("writexl")
library("writexl")
```

## Importar dados

**Formato .xlsx**

```{r}
# importar xlsx
si <- readxl::read_excel("../03_dados/ATLANTIC_AMPHIBIANS_sites.xlsx")
si
```

## Exportar dados

**Diversos formatos**
```{r eval=FALSE}
# exportar csv
readr::write_csv(si, "ATLANTIC_AMPHIBIANS_sites_exportado.csv")

# exportar txt
readr::write_tsv(si, "ATLANTIC_AMPHIBIANS_sites_exportado.txt")

# exportar excel
writexl::write_xlsx(si, "ATLANTIC_AMPHIBIANS_sites_exportado.xlsx")
```

# 
<center>
<img src="img/package_tibble.png" style="width:50%"/>
</center>

:::footer
[tibble](https://tibble.tidyverse.org/)
:::

## Descrição {.smaller}

- Dados importados de planilhas eletrônicas são *data frames* (quadro de dados)

- `tibble` (classe `tbl_df`) é um tipo especial de data frame

- Classe adequada para o funcionamento das das funções do `tidyverse`

```{r eval=FALSE}
# tibble
tb <- tibble::tibble(a = 1:10)
tb

as.data.frame(tb)
```

<br>
<center>
<img src="img/tibble.webp" style="width:40%"/>
</center>

## Espiando os dados {.smaller}

- Descrição dos dados: linhas (*Rows*) e colunas (*Columns*) 

- Descrição das colunas: *numbers(int, dbl)*, *character(chr)*, *logical(lgl)* ou *factor(fctr)*

```{r}
# descricao dos dados de sites
tibble::glimpse(si)
```

# 
<center>
<img src="img/package_magrittr.png" style="width:50%"/>
</center>

:::footer
[magrittr](https://magrittr.tidyverse.org/)
:::

## René Magritte (1898-1967)

- Artista surrealista belga

- "Ceci n'est pas une pipe"

- Isso não é um cachimbo

![](img/tidyverse_magritte_pipe.jpg){.absolute width=500 height=300 right=550 top=350}

![](img/person_rene_magritte.jpg){.absolute width=500 height=500 right=-50 top=150}

## Descrição {.smaller}

- *Pipe* pode ser traduzido como "cano" ou "tubo"

- Permite o “encadeamento” de várias funções sem armazenar resultados intermediários

- Captura o resultado de uma função e torna a entrada da próxima função

- Os códigos se tornam mais simples, pois permite a leitura sequencial do mesmo

- Operador pipe: `%>%`

- Atalho: `crtl + shift + M`

```{r eval=FALSE}
# sem pipe
obj <- funcao2(funcao1(dados))

# pipe
obj <- dados %>% 
  funcao1() %>% 
  funcao2()
```

# Se preparem para uma revisão de funções compostas

## Função composta

**Função composta no R**

```{r}
# sem pipe
sqrt(sum(1:100))
```

![](img/general_fog01.jpg){.absolute width=500 height=250 right=550 top=350}

![](img/general_fog02.jpg){.absolute width=450 height=450 right=0 top=250}

## pipe {.smaller}

**Sem pipe**

```{r}
# sem pipe
sqrt(sum(1:100))
```

**Com pipe**

```{r}
# com pipe
1:100 %>% 
  sum() %>% 
  sqrt()
```

![](img/gif_mario.gif){.absolute width=350 height=300 right=430 top=400}

![](img/waterfall.gif){.absolute width=400 height=300 right=0 top=400}

## pipe

**Sem pipe**

```{r}
# fixar amostragem
set.seed(42)

# sem pipe
ve <- sqrt(sum(sample(0:60, 6)))
ve
```

**Com pipe**

```{r}
# fixar amostragem
set.seed(42)

# com pipe
ve <- sample(0:60, 6) %>% 
  sum() %>%
  sqrt() 
ve  
```

## Exercício 01

Reescreva cada uma das operações utilizando pipes `%>%`

`log10(cumsum(1:100))`

`sum(sqrt(abs(rnorm(100))))`

`sum(log((sample(1:10, 10000, rep = TRUE)))`

```{r echo=FALSE}
countdown::countdown(minutes = 5, seconds = 00, color_background = "gray30", font_size = "2em", play_sound = TRUE)
```

## Exercício 01

**Solução**

```{r eval=FALSE}
# solucao 1
log10(cumsum(1:100))

1:100 %>%
  cumsum() %>% 
  log10()
```

## Exercício 01

**Solução**

```{r eval=FALSE}
# solucao 2
sum(sqrt(abs(rnorm(100))))

rnorm(100) %>% 
  abs() %>% 
  sqrt() %>% 
  sum()
```

## Exercício 01

**Solução**

```{r eval=FALSE}
# solucao 3
sum(log(sample(1:10, 10000, rep = TRUE)))

sample(1:10, 10000, rep = TRUE) %>% 
  log() %>% 
  sum()
```

# Para apresentar os próximos pacotes, vamos usar dados de pinguins!

# 
<center>
<img src="img/package_palmerpenguins.png" style="width:50%"/>
</center>

:::footer
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

## palmerpenguins {.smaller}

- Dados de medidas de pinguins chamados `palmerpenguins`

- Dados coletados e disponibilizados pela [Dra. Kristen Gorman](https://www.uaf.edu/cfos/people/faculty/detail/kristen-gorman.php) e pela [Palmer Station, Antarctica LTER](https://pal.lternet.edu/), membro da [Long Term Ecological Research Network](https://lternet.edu/)

- Dois conjuntos de dados: 

- `penguins_raw` (dados brutos)
- `penguins` (versão simplificada)

![](img/lter_penguins.png){.absolute width=700 height=400 right=-50 top=300}

:::footer
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

## palmerpenguins

```{r eval=FALSE}
# instalar 
install.packages("palmerpenguins")

# carregar
library(palmerpenguins)

# ajuda dos dados
?penguins
?penguins_raw
```

```{r echo=FALSE}
library(palmerpenguins)
```

<center>
<img src="img/culmen_depth.png" style="width:50%"/>
</center>

:::footer
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

## palmerpenguins

```{r eval=FALSE}
# visualizar os dados
penguins
penguins_raw

# glimpse
tibble::glimpse(penguins)
tibble::glimpse(penguins_raw)
```

<br>
<center>
<img src="img/culmen_depth.png" style="width:50%"/>
</center>

:::footer
[palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)
:::

# 
<center>
<img src="img/package_tidyr.png" style="width:50%"/>
</center>

:::footer
[tidyr](https://tidyr.tidyverse.org/)
:::

## Descrição {.smaller}

- Funções para tornar um conjunto de dados *tidy* (organizados), facilitando a manipulação, modelagem e visualização

- Um conjunto de dados é condiderando *tidy* quando:

1. Cada variável está em uma coluna
2. Cada observação está em uma linha
3. Cada valor está em uma célula

<center>
<img src="img/tidyr_data01.png" style="width:100%"/>
</center>

:::footer
[Wickham & Grolemund (2017)](https://r4ds.had.co.nz/)
:::

## Funções {.smaller}

<center>
<img src="img/tidyr_data02.jpg" style="width:100%"/>
</center>

:::footer
[@allison_horst](https://twitter.com/allison_horst)
:::

## unite

Une dados de múltiplas colunas em apenas uma coluna

```{r}
# unir colunas
penguins_raw_unir <- tidyr::unite(data = penguins_raw, 
                                  col = "region_island",
                                  Region:Island, 
                                  sep = ", ",
                                  remove = FALSE)
head(penguins_raw_unir[, c("Region", "Island", "region_island")])
```

## separate

Separa caracteres de uma coluna em múltiplas colunas

```{r}
# separar colunas
penguins_raw_separar <- tidyr::separate(data = penguins_raw, 
                                        col = Stage,
                                        into = c("stage", "egg_stage"), 
                                        sep = ", ",
                                        remove = FALSE)
head(penguins_raw_separar[, c("Stage", "stage", "egg_stage")])
```

## drop_na

Remove linhas com `NA` de todas as colunas

```{r}
# remover linhas com na
penguins_raw_todas_na <- tidyr::drop_na(data = penguins_raw)
head(penguins_raw_todas_na)
```

## drop_na

Remove linhas com `NA` de uma única coluna

```{r}
# remover linhas com na de uma coluna
penguins_raw_colunas_na <- tidyr::drop_na(data = penguins_raw,
                                          any_of("Comments"))
head(penguins_raw_colunas_na[, "Comments"])
```

# 
<center>
<img src="img/package_dplyr.png" style="width:50%"/>
</center>

:::footer
[dplyr](https://dplyr.tidyverse.org/)
:::

## Descrição

Funções que facilitam a manipulação de dados

<center>
<img src="img/dplyr_functions.png" style="width:60%"/>
</center>

## Funções {.smaller}

Gramática simples que contém funções verbais para a manipulação de dados

<br>

-   Verbos: `mutate()`, `select()`, `filter()`, `arrange()`, `summarise()`, `slice()`, `rename()`, etc.
-   Replicação: `across()`, `if_any()`, `if_all()`, `where()`, `starts_with()`, `ends_with()`, `contains()`, etc.
-   Agrupamento: `group_by()` e `ungroup()`
-   Junções: `inner_join()`, `full_join()`, `left_join()`, `right_join()`, etc.
-   Combinações: `bind_rows()` e `bind_cols()`
-   Resumos, contagem e seleção: `n()`, `n_distinct()`, `first()`, `last()`, `nth()`, etc.

## Funções {.smaller}

**Colunas**

`relocate()`: muda a ordem das colunas  
`rename()`: muda o nome das colunas  
`select()`: seleciona colunas pelo nome ou posição  
`pull()`: seleciona uma coluna como vetor  
`mutate()`: adiciona novas colunas ou resultados em colunas existentes  

**Linhas**

`arrange()`: reordena as linhas com base nos valores de colunas  
`filter()`: seleciona linhas com base em valores de colunas  
`slice()`: seleciona linhas de diferente formas  
`distinct()`: remove linhas com valores repetidos com base nos valores de colunas  

**Agrupamento**

`count()`: conta observações para uma ou mais coluna  
`group_by()`: agrupa linhas pelos valores das colunas  
`summarise()`: resume os dados através de funções considerando valores das colunas  

## Sintaxe {.smaller}

- O `tibble` é sempre o primeiro argumento das funções verbais

- Todas seguem a mesma sintaxe: 

1. tibble
1. operador pipe 
1. nome da função verbal com os argumentos entre parênteses 

As funções verbais não modificam o tibble original

```{r eval=FALSE}
# sintaxe
tb_dplyr <- tb %>% 
  funcao_verbal1(argumento1, argumento2, ...) %>% 
  funcao_verbal2(argumento1, argumento2, ...) %>% 
  funcao_verbal3(argumento1, argumento2, ...)
```

## relocate

Reordena colunas por nome ou posição

```{r}
# reordenar colunas - nome
penguins_relocate_col <- penguins %>% 
  dplyr::relocate(sex, year, .after = island)
head(penguins_relocate_col)
```

## relocate

Reordena colunas por nome ou posição

```{r}
# reordenar colunas - posicao
penguins_relocate_ncol <- penguins %>% 
  dplyr::relocate(sex, year, .after = 2)
head(penguins_relocate_ncol)
```

## rename

Renomeia colunas

```{r}
# renomear colunas
penguins_rename <- penguins %>% 
  dplyr::rename(bill_length = bill_length_mm,
                bill_depth = bill_depth_mm,
                flipper_length = flipper_length_mm,
                body_mass = body_mass_g)
head(penguins_rename)
```

## select

Seleciona colunas pela posição ou nome

```{r}
# selecionar colunas por posicao
penguins_select_position <- penguins %>% 
  dplyr::select(3:6)
head(penguins_select_position)
```

## select

Seleciona colunas pela posição ou nome

```{r}
# selecionar colunas por nomes
penguins_select_names <- penguins %>% 
  dplyr::select(bill_length_mm:body_mass_g)
head(penguins_select_names)
```

## select

Remove colunas pela posição ou nome

```{r}
# remover colunas pelo nome
penguins_select_names_remove <- penguins %>% 
  dplyr::select(-(bill_length_mm:body_mass_g))
head(penguins_select_names_remove)
```

## select

Seleciona ou remove colunas por um padrão nos nomes

```{r}
# selecionar colunas por padrao - starts_with(), ends_with() e contains()
penguins_select_contains <- penguins %>% 
  dplyr::select(contains("_mm"))
head(penguins_select_contains)
```

## pull

Seleciona uma coluna como vetor

```{r}
# coluna para vetor
penguins_select_pull <- penguins %>% 
  dplyr::pull(bill_length_mm)
head(penguins_select_pull, 15)
```

## mutate

Adiciona colunas novas ou advindas de operações

```{r}
# adicionar colunas
penguins_mutate <- penguins %>% 
  dplyr::mutate(body_mass_kg = body_mass_g/1e3, .before = sex)
head(penguins_mutate)
```

## arrange

Reordena linhas de forma crescente pelos valores de uma coluna

```{r}
# reordenar os valores por ordem crescente
penguins_arrange <- penguins %>% 
  dplyr::arrange(body_mass_g)
head(penguins_arrange)
```

## arrange

Reordena linhas de forma decrescente pelos valores de uma coluna

```{r}
# reordenar os valores por ordem decrescente
penguins_arrange_desc <- penguins %>% 
  dplyr::arrange(desc(body_mass_g))
head(penguins_arrange_desc)
```

## arrange

Reordena linhas de forma decrescente pelos valores de uma coluna

```{r}
# reordenar os valores por ordem decrescente
penguins_arrange_desc_m <- penguins %>% 
  dplyr::arrange(-body_mass_g)
head(penguins_arrange_desc_m)
```

## filter

Filtra linhas por valores de uma coluna

```{r}
# filtrar linhas por valores de uma coluna
penguins_filter <- penguins %>% 
  dplyr::filter(species == "Adelie")
head(penguins_filter)
```

## filter

Filtra linhas por valores de várias colunas

```{r}
# filtrar linhas por valores de duas colunas
penguins_filter_two <- penguins %>% 
  dplyr::filter(species == "Adelie" & sex == "female")
head(penguins_filter_two)
```

## filter

Filtra linhas por vários valores de várias colunas

```{r}
# filtrar linhas por mais de um valor e mais de uma coluna
penguins_filter_in <- penguins %>% 
  dplyr::filter(species %in% c("Adelie", "Gentoo"),
                sex == "female")
head(penguins_filter_in)
```

## slice

Seleciona linhas por intervalos, indicando quais linhas desejamos

```{r}
# selecionar linhas por intervalos
penguins_slice <- penguins %>% 
  dplyr::slice(n = c(1, 3, 300:n()))
head(penguins_slice)
```

## slice

Seleciona linhas iniciais

```{r}
# selecionar linhas iniciais
penguins_slice_head <- penguins %>% 
  dplyr::slice_head(n = 5)
head(penguins_slice_head)
```

## slice

Seleciona linhas aleatoriamente, com e sem reposição

```{r}
# selecionar linhas aleatoriamente
penguins_slice_sample <- penguins %>% 
  dplyr::slice_sample(n = 30, replace = FALSE)
head(penguins_slice_sample)
```

## distinct

Retira linhas com valores duplicados com base nos valores de colunas

```{r}
# retirar linhas com valores duplicados
penguins_distinct <- penguins %>% 
  dplyr::distinct(body_mass_g)
head(penguins_distinct)
```

## distinct

Retira linhas com valores duplicados com base nos valores de colunas, mas mantendo as colunas

```{r}
# retirar linhas com valores duplicados e manter colunas
penguins_distinct_keep_all <- penguins %>% 
  dplyr::distinct(body_mass_g, .keep_all = TRUE)
head(penguins_distinct_keep_all)
```

## count

Conta valores de uma ou mais colunas (variáveis categóricas)

```{r}
# contagens de valores para uma coluna
penguins_count <- penguins %>% 
  dplyr::count(species)
penguins_count
```

## count

Conta valores de uma ou mais colunas (variáveis categóricas)

```{r}
# contagens de valores para mais de uma coluna
penguins_count_two <- penguins %>% 
  dplyr::count(species, island)
penguins_count_two
```

## count

Conta valores de uma ou mais colunas (variáveis categóricas) ordenando a contagem

```{r}
# contagens de valores para mais de uma coluna
penguins_count_two_sort <- penguins %>% 
  dplyr::count(species, island, sort = TRUE)
penguins_count_two_sort
```

## group_by

Transforma um `tibble` em um `tibble agrupado`, onde as operações são realizadas "por grupo"

```{r}
# agrupamento
penguins_group_by <- penguins %>% 
  dplyr::group_by(species)
head(penguins_group_by)
```

## summarise

Agrega ou resume dados através de funções síntese

```{r}
# resumo
penguins_summarise <- penguins %>% 
  dplyr::group_by(species) %>% 
  dplyr::summarize(body_mass_g_mean = mean(body_mass_g, na.rm = TRUE),
                   body_mass_g_sd = sd(body_mass_g, na.rm = TRUE))
penguins_summarise
```

# Dúvidas?

# Visualização de dados

#
<center>
<img src="img/plot_saurus.png" style="width:90%"/>
</center>

:::footer
[Matejka & Fitzmaurice (2017)](https://www.autodeskresearch.com/publications/samestats)
:::

## Contextualização

:::{.incremental}
- Melhor forma de apresentar, sintetizar, discutir e interpretar seus dados

- Necessário em quase todas as análises estatísticas 

- Necessário em quase todas as publicações, trabalhos de consultoria, TCC, dissertação, tese, etc. 

- Existem vários tipos de gráficos para representar os padrões em seus dados para diferentes tipos de finalidades

- De forma simplificada, os gráficos são representações dos nossos dados tabulares
:::

## Como mentir com estatística?

![](img/cover_mentir_estatistica.jpg){.absolute width=270 height=400 right=800 top=200}
![](img/como_mentir_est.png){.absolute width=850 height=450 right=-100 top=150}

:::footer
[Heff (2016)](https://www.intrinseca.com.br/livro/624/), [Como MENTIR com ESTATÍSTICA](https://youtu.be/r6d-RBDlc5I)
:::

# 
<center>
<img src="img/package_graphics.png" style="width:50%"/>
</center>

:::footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## graphics {.smaller}

- Default do R e mais simples

- Pode ser utilizado para objetos de diversas classes

- Funções:

<br>

::: columns
::: {.column width="30%"}
`plot()`<br>
`hist()`<br>
`barplot()`<br>
`boxplot()`<br>
`abline()`<br>
`points()`<br>
`lines()`<br>
`polygon()`<br>
:::

::: {.column width="70%"}
```{r warning=FALSE, message=FALSE, fig.align="center"}
# graphics
plot(flipper_length_mm ~ body_mass_g, data = penguins)
```
:::
:::

# 
<center>
<img src="img/package_ggplot2.png" style="width:50%"/>
</center>

:::footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## ggplot2 {.smaller}

- Integrado ao `tidyverse`, possui uma sintaxe própria de camadas (*layers*)

- Necessita de funções específicas para objetos de classes diferentes

- Funções:

::: columns
::: {.column width="30%"}
`ggplot() +`<br>
`aes() +`<br>
`geom_() +`<br>
`facet_() +`<br>
`stats_() +`<br>
`coord_() +`<br>
`theme_()`<br>
:::

::: {.column width="70%"}
```{r warning=FALSE, message=FALSE, fig.align="center"}
# ggplot2
library(ggplot2)
ggplot(data = penguins) + aes(x = body_mass_g, y = flipper_length_mm) + geom_point()
```
:::
:::

## Gramática dos gráficos

Wilkinson (2005) *Grammar of Graphics*: representação gráfica dos dados a partir de atributos estéticos (do inglês *aesthetic*)

![](img/cover_grammar_graphics.jpg){.absolute width=200 height=300 right=830 top=300}
![](img/ggplot2_structure.png){.absolute width=750 height=450 right=0 top=200}

:::footer
[Wilkinson (2005)](https://www.springer.com/gp/book/9780387245447)
:::

## Camadas (*layers*)

<center>
<img src="img/plot_ggplot.gif" style="width:100%"/>
</center>

:::footer
[Think About the Grammar of Graphics When Improving Your Graphs](https://medium.com/tdebeus/think-about-the-grammar-of-graphics-when-improving-your-graphs-18e3744d8d18)
:::

## ggplot2

Wickham (2008) criou o pacote `ggplot2`, onde “gg” representa a contração de *Grammar of Graphics*

![](img/cover_ggplot2.jpg){.absolute width=200 height=300 right=830 top=300}
![](img/ggplot2_gramatica.png){.absolute width=750 height=450 right=0 top=200}

:::footer
[Wickham (2008)](https://ggplot2-book.org/)
:::

# Principais tipos de gráficos

## Elementos de um gráfico 

Representações das colunas (eixos) e linhas (elementos)

<center>
<img src="img/plot_data_table_scatterplot.png" style="width:90%"/>
</center>

## Tipos de variáveis

![](img/plot_variables.png){.absolute width=500 height=250 right=300 top=100}

![](img/nominal_ordinal_binary.png){.absolute width=500 height=350 right=550 top=350}

![](img/continuous_discrete_inv.png){.absolute width=500 height=350 right=50 top=350}

:::footer
[Matthiopoulos (2011)](http://greenmaths.st-andrews.ac.uk/), [@allison_horst](https://twitter.com/allison_horst)
:::

## Tipos de variáveis e tipos gráficos

<br>
<center>
<img src="img/ggplot_data_from_viz.png" style="width:85%"/>
</center>

:::footer
[from Data to Viz](https://www.data-to-viz.com/)
:::

## Tipos de variáveis e tipos gráficos

<center>
<img src="img/r_charts_suggests.png" style="width:100%"/>
</center>

## R CHARTS

<center>
<img src="img/rcharts-featured.png" style="width:100%"/>
</center>

:::footer
[R CHARTS](https://r-charts.com/)
:::

# Histograma (*Histogram*)

## Histograma (*Histogram*) 

- Representa dados de uma coluna

- Dados do tipo discreto ou contínuo

- Distribuição de frequência ou densidade

![](img/plot_histogram.png){.absolute width=350 height=350 right=550 top=310}

![](img/plot_density.png){.absolute width=350 height=350 right=100 top=310}

:::footer
[histogram](https://www.data-to-viz.com/graph/histogram.html), [density](https://www.data-to-viz.com/graph/density.html)
:::

## Histograma (*Histogram*) 

<br>
<center>
<img src="img/hist_fig1.gif" style="width:80%"/>
</center>

. . . 

<br>

<center>
<img src="img/hist_fig2.gif" style="width:80%"/>
</center>

:::footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

## Histograma (*Histogram*) 

<center>
<img src="img/hist_fig3.gif" style="width:55%"/>
</center>

:::footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

## Densidade (*Density*) 

<br><br>
<center>
<img src="img/hist_fig5.jpg" style="width:100%"/>
</center>

:::footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::

## Densidade (*Density*) 

![](img/hist_fig6.gif){.absolute width=550 height=350 right=550 top=250}

. . . 

![](img/hist_fig7.gif){.absolute width=560 height=340 right=-50 top=265}

:::footer
[Intro to Histograms](https://plotly.com/chart-studio-help/histogram/)
:::


# 
<center>
<img src="img/package_graphics.png" style="width:50%"/>
</center>

:::footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Histograma (*Histogram*) 

**graphics**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Frequência",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
```
:::
:::

## Densidade (*Density*)

**graphics**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5,
     prob = TRUE)
lines(density(na.omit(penguins$flipper_length_mm)))
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(5, 5, 5, 5))
hist(penguins$flipper_length_mm,
     col = "gray50",
     border = "gray",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     br = 50,
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5,
     prob = TRUE)
lines(density(na.omit(penguins$flipper_length_mm)))
```
:::
:::

## Densidade (*Density*)

**graphics**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 5, 5))
plot(density(na.omit(penguins$flipper_length_mm)),
     col = "gray50",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
polygon(density(na.omit(penguins$flipper_length_mm)), 
        col = "gray50")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
par(mar = c(5, 5, 5, 5))
plot(density(na.omit(penguins$flipper_length_mm)),
     col = "gray50",
     main = "Comprimento da nadadeira dos penguins",
     xlab = "Comprimento da nadadeira (mm)",
     ylab = "Densidade",
     cex.main = 2,
     cex.lab = 2, 
     cex.axis = 1.5)
polygon(density(na.omit(penguins$flipper_length_mm)), 
        col = "gray50")
```
:::
:::

# 
<center>
<img src="img/package_ggplot2.png" style="width:50%"/>
</center>

:::footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Histograma (*Histogram*) 

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, aes(x = flipper_length_mm)) +
  geom_histogram(color = "black", fill = "cyan4", 
                 bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, aes(x = flipper_length_mm)) +
  geom_histogram(color = "black", fill = "cyan4", 
                 bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::

## Histograma (*Histogram*) 

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::

## Histograma (*Histogram*) 

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5, position = "dodge") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 10, alpha = .5, position = "dodge") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::

## Histograma (*Histogram*) 

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(alpha = .5, position = "identity") +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(alpha = .5, position = "identity") +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::

## Histograma (*Histogram*) 

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_wrap(~ species, ncol = 2, scale = "free_y") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_wrap(~ species, ncol = 2, scale = "free_y") +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::

## Histograma (*Histogram*) 

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_grid(species ~ .) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  facet_grid(species ~ .) +
  labs(title = "Comprimento da nadadeira dos penguins",
       fill = "Espécies",
       x = "Comprimento da nadadeira (mm)", 
       y = "Frequência") +
  theme_bw(base_size = 20)
```
:::
:::

## Densidade (*Density*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins) +
  aes(x = flipper_length_mm) +
  geom_density(color = "black", fill = "cyan4", alpha = .5) + 
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Densidade") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins) +
  aes(x = flipper_length_mm) +
  geom_density(color = "black", fill = "cyan4", alpha = .5) + 
  labs(title = "Comprimento da nadadeira dos penguins",
       x = "Comprimento da nadadeira (mm)", 
       y = "Densidade") +
  theme_bw(base_size = 20)
```
:::
:::

## Densidade (*Density*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = .5) +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(x = "Comprimento da nadadeira (mm)", 
       y = "Densidade", 
       fill = "Espécie") +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15
ggplot(data = penguins, 
       aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = .5) +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(x = "Comprimento da nadadeira (mm)", 
       y = "Densidade", 
       fill = "Espécie") +
  theme_bw(base_size = 20)
```
:::
:::


## Densidade (*Density*)

**ggplot2**

```{r}
#| eval: false
ggplot_densidade <- ggplot(data = penguins, 
                           aes(x = flipper_length_mm, fill = species)) +
  geom_density(alpha = .5) +
  scale_fill_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(x = "Comprimento da nadadeira (mm)", 
       y = "Densidade", 
       fill = "Espécie") +
  theme_bw(base_size = 20)

ggsave(filename = "density_ggplot2.png", 
       plot = ggplot_densidade, wi = 20, he = 15, un = "cm", dpi = 300)
```

# Gráfico de caixas <br> (*Box plot*)

## Gráfico de caixas (*Box plot*)

- Representa dados de duas colunas

- Dados do tipo categóricos: X = categórico e Y = contínuo

- Resume informações de medidas contínuas para dois ou mais fatores categóricos

![](img/plot_boxplot.png){.absolute width=350 height=350 right=360 top=310}

:::footer
[boxplot](https://www.data-to-viz.com/caveat/boxplot.html)
:::

## Gráfico de caixas (*Box plot*)

- Intervalo inter-quartil (*interquartile range* - IQR)

- Limite inferior e limite superipor (1.5 x IQR)

- Valores exteriores (*outliers*)

![](img/plot_boxplot1.png){.absolute width=500 height=280 right=520 top=350}
![](img/plot_boxplot2.png){.absolute width=430 height=430 right=50 top=250}

:::footer
[Understanding Boxplots](https://www.kdnuggets.com/2019/11/understanding-boxplots.html)
:::

## Gráfico de caixas (*Box plot*)

<br>
<center>
<img src="img/boxplotfig1.gif" style="width:80%"/>
</center>

. . . 

<center>
<img src="img/boxplotfig2.gif" style="width:80%"/>
</center>

:::footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>
<center>
<img src="img/boxplotfig3.gif" style="width:80%"/>
</center>

. . . 

<center>
<img src="img/boxplotfig4.gif" style="width:80%"/>
</center>

:::footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>
<center>
<img src="img/boxplotfig5.gif" style="width:80%"/>
</center>

. . . 

![](img/boxplotfig7.gif){.absolute width=1000 height=350 right=-190 top=340}

:::footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br><br><br>
<center>
<img src="img/boxplotfig6.gif" style="width:100%"/>
</center>

:::footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>
<center>
<img src="img/boxplotfig8.gif" style="width:60%"/>
</center>

:::footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

## Gráfico de caixas (*Box plot*)

<br>
<center>
<img src="img/boxplotfig9.gif" style="width:80%"/>
</center>

:::footer
[Intro to Box Plots](https://plotly.com/chart-studio-help/what-is-a-box-plot/)
:::

# 
<center>
<img src="img/package_graphics.png" style="width:50%"/>
</center>

:::footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico de caixas (*Box plot*)

**graphics**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        border = "black",
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5,
        cex.lab = 1.3,
        cex.axis = 1.2)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

boxplot(flipper_length_mm ~ as.factor(species),
        data = penguins,
        col = c("darkorange", "purple", "cyan4"),
        border = "black",
        main = "Espécies por amostragens",
        xlab = "Espécies",
        ylab = "Comprimento da nadadeira (mm)",
        cex.main = 1.5,
        cex.lab = 1.3,
        cex.axis = 1.2)
```
:::
:::

# 
<center>
<img src="img/package_ggplot2.png" style="width:50%"/>
</center>

:::footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de caixas (*Box plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::
:::

## Gráfico de caixas (*Box plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot(width = .3, 
               show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Species", y = "Flipper length (mm)")
```
:::
:::

## Gráfico de caixas (*Violin plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_violin(width = .3, 
              show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(title = "Pontos com jitter", x = "Species", y = "Flipper length (mm)")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_violin(width = .3, 
              show.legend = FALSE) +
  geom_jitter(alpha = .5, 
              show.legend = FALSE, 
              position = position_jitter(width = .1, seed = 0)) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(title = "Pontos com jitter", x = "Species", y = "Flipper length (mm)")
```
:::
:::

# Gráfico de dispersão (*Scatter plot*)

## Gráfico de dispersão (*Scatter plot*)

- Representa dados de duas colunas

- Dados do tipo categóricos: X = contínuo e Y = contínuo

- Plota a relação entre duas variáveis contínuas

![](img/plot_scatter.png){.absolute width=350 height=350 right=360 top=310}

:::footer
[scatterplot](https://www.data-to-viz.com/graph/scatter.html)
:::

# 
<center>
<img src="img/package_graphics.png" style="width:50%"/>
</center>

:::footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico de dispersão (*Scatter plot*)

**graphics**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
par(mar = c(5, 5, 1, 1))
plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5,
     cex.axis = 1.3,
     bty = "l")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

par(mar = c(5, 5, 1, 1))
plot(bill_depth_mm ~ bill_length_mm,
     data = penguins,
     pch = 20,
     cex = 1.5,
     xlab = "Comprimento do bico (mm)", 
     ylab = "Profundidade do bico (mm)",
     cex.lab = 1.5,
     cex.axis = 1.3,
     bty = "l")
```
:::
:::

# 
<center>
<img src="img/package_ggplot2.png" style="width:50%"/>
</center>

:::footer
[ggplot2](https://ggplot2.tidyverse.org/)
:::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```
:::
:::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

ggplot(data = penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm,
           color = species,
           shape = species)) +
  geom_point(size = 3, alpha = .8) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_shape_manual(values = c(19, 15, 17)) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 15) +
  labs(x = "Comprimento do bico (mm)", 
       y = "Profundidade do bico (mm)", 
       color = "Espécies", shape = "Espécies")
```
:::
:::

## Gráfico de dispersão (*Scatter plot*) {.smaller}

Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing

**Justin Matejka, George Fitzmaurice**

<center>
<img src="img/gif_data_dino_statistics.gif" style="width:100%"/>
</center>

:::footer
[Matejka & Fitzmaurice (2017)](https://www.autodeskresearch.com/publications/samestats)
:::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# package
library(datasauRus)

# data + plot
datasaurus_dozen %>% 
  dplyr::filter(dataset == "dino") %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 5, alpha = .75, pch = 21) +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# package
library(datasauRus)

# data + plot
datasaurus_dozen %>% 
  dplyr::filter(dataset == "dino") %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 5, alpha = .75, pch = 21) +
  theme_bw(base_size = 20)
```
:::
:::

## Gráfico de dispersão (*Scatter plot*)

**ggplot2**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
datasaurus_dozen %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 1, alpha = .75, pch = 21) +
  facet_wrap(~dataset) +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

datasaurus_dozen %>% 
  ggplot() +
  aes(x = x, y = y) +
  geom_point(colour = "black", fill = "black", 
             size = 1, alpha = .75, pch = 21) +
  facet_wrap(~dataset) +
  theme_bw(base_size = 20)
```
:::
:::

# Gráfico pareado <br> (*Pairs plot*)

## Gráfico pareado (*Pairs plot*)

- Representa dados de duas colunas

- Dados do tipo categóricos: X = contínuo e Y = contínuo

- Plota a relação entre duas variáveis contínuas, mas para várias colunas

![](img/plot_correlogram.png){.absolute width=350 height=350 right=360 top=310}

:::footer
[correlogram](https://www.data-to-viz.com/#correlogram)
:::

# 
<center>
<img src="img/package_graphics.png" style="width:50%"/>
</center>

:::footer
[graphics](http://search.r-project.org/R/library/graphics/html/00Index.html)
:::

## Gráfico pareado (*Pairs plot*)

**graphics**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  pairs(pch = 20,
        upper.panel = NULL)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  pairs(pch = 20,
        upper.panel = NULL)
```
:::
:::

# 
<center>
<img src="img/package_ggplot2.png" style="width:50%"/>
</center>

:::footer
[GGally](http://ggobi.github.io/ggally/)
:::

## Gráfico pareado (*Pairs plot*)

**GGally**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# pacote
# install.packages("GGally")
library(GGally)

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  ggpairs() +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

# pacote
# install.packages("GGally")
library(GGally)

penguins %>%
  dplyr::select(body_mass_g, ends_with("_mm")) %>%
  ggpairs() +
  theme_bw(base_size = 20)
```
:::
:::

## Gráfico pareado (*Pairs plot*)

**GGally**

::: columns
::: {.column width="50%"}
```{r}
#| eval: false

penguins %>%
  dplyr::select(species, sex, body_mass_g, ends_with("_mm")) %>%
  GGally::ggpairs(aes(color = species)) +
  scale_colour_manual(values = c("darkorange", "purple", "cyan4")) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 20)
```

:::

::: {.column width="50%"}
```{r}
#| fig-height: 10
#| echo: false
#| fig-weight: 15

penguins %>%
  dplyr::select(species, sex, body_mass_g, ends_with("_mm")) %>%
  GGally::ggpairs(aes(color = species)) +
  scale_colour_manual(values = c("darkorange", "purple", "cyan4")) +
  scale_fill_manual(values = c("darkorange", "purple", "cyan4")) +
  theme_bw(base_size = 20)
```
:::
:::

# 2 Estatística

## Análises Ecológicas no R (2022)

::: columns
::: {.column width="40%"}

<br>
<center>
<img src="img/aer.jpeg" href="https://analises-ecologicas.com/" style="width:90%"/>
</center>
:::

::: {.column width="60%"}

[Capítulo 2 - Perguntas científicas](https://analises-ecologicas.com/cap2.html)

<center>
<img src="img/perguntas.png" style="width:55%"/>
</center>

:::
:::

:::footer
[Da Silva et al. (2022)](https://analises-ecologicas.com/)
:::

## Abordagens filosóficas em Ciência

### Método Hipotético-Dedutivo (Karl Popper)

1. Identificar um problema ou lacuna de conhecimento
1. Formulação de hipóteses
1. Inferência dedutiva (teste das hipóteses para os casos particulares - tentativa de falseamento ou refutação)
1. Corroboração ou rejeição da hipótese

<br><br>
<center>
<img src="img/popper.png" style="width:80%"/>
<img src="img/cisne_negro.jpg" style="width:80%"/>
</center>

# Dúvidas?

## Muito obrigado!

::: columns
::: {.column width="50%"}
Agradecimentos:

- [Prof. Tadeu Siqueira](https://tsiqueiralab.weebly.com/)
- [Prof. Miltinho](https://leec.eco.br/)
- [Fapesp #2022/01899-6](https://bv.fapesp.br/pt/bolsas/203713/estrutura-da-paisagem-como-preditor-da-diversidade-taxonomica-e-funcional-de-anfibios-na-mata-atlant/)

<center>
<img src="img/fapesp.png" style="width:70%"/>
</center>

:::

::: {.column width="50%"}
Contato:

<center>
[`r icons::icon_style(icons::fontawesome("link"), fill = "#2268bc")`](https://mauriciovancine.github.io/)
[`r icons::icon_style(icons::fontawesome("envelope", style = "solid"), fill = "#2268bc")`](mailto:mauricio.vancine@gmail.com)
[`r icons::icon_style(icons::fontawesome("twitter"), fill = "#2268bc")`](https://twitter.com/mauriciovancine)
[`r icons::icon_style(icons::fontawesome("github"), fill = "#2268bc")`](https://github.com/mauriciovancine)

<img src="img/gif_frogs.gif" style="width:80%"/>
</center>

:::
:::

:::footer
Slides por [Maurício Vancine](https://mauriciovancine.github.io/), feitos com [Quarto](https://quarto.org/). Código disponível no [GitHub](https://github.com/mauriciovancine/workshop-r-data-analysis/blob/master/01_slides/slides.qmd).
:::